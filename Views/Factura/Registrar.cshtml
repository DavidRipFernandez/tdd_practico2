@model ProyectoIdentity.Models.FacturaViewModel

@{
    ViewData["Title"] = "Registrar Factura";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Prepara la lista de productos para el diccionario JS
    var productosJs = ((IEnumerable<ProyectoIdentity.Models.Producto>)ViewBag.ProductosList)
        .ToDictionary(p => p.Id, p => p.PrecioVenta);
}

<div class="card mt-4">
    <div class="card-body">
        <h3 class="card-title text-center">Registrar Factura</h3>
        <form asp-action="Registrar" method="post">
            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="ClienteId" class="form-label">Cliente</label>
                        <select asp-for="ClienteId" asp-items="ViewBag.Clientes" class="form-select"></select>
                        <span asp-validation-for="ClienteId" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="CondicionPagoId" class="form-label">Condición de Pago</label>
                        <select asp-for="CondicionPagoId" asp-items="ViewBag.CondicionesPago" class="form-select"></select>
                        <span asp-validation-for="CondicionPagoId" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="MetodoPagoId" class="form-label">Método de Pago</label>
                        <select asp-for="MetodoPagoId" asp-items="ViewBag.MetodosPago" class="form-select"></select>
                        <span asp-validation-for="MetodoPagoId" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Fecha" class="form-label">Fecha</label>
                        <input asp-for="Fecha" type="date" class="form-control" />
                        <span asp-validation-for="Fecha" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-6">
                    <h5>Observaciones (opcional):</h5>
                    <textarea class="form-control" rows="6" placeholder="Comentarios o notas adicionales..."></textarea>
                </div>
            </div>
            <hr />
            <h4>Detalle de la Factura</h4>

            <div class="table-responsive">
                <table class="table table-bordered align-middle" id="tabla-items">
                    <thead class="table-light">
                        <tr>
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Subtotal</th>
                            <th>Descuento (%)</th>
                            <th>Total</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Items.Count; i++)
                        {
                            <tr>
                                <td>
                                    <select asp-for="Items[@i].ProductoId" asp-items="ViewBag.Productos" class="form-select producto-select"></select>
                                </td>
                                <td>
                                    <input asp-for="Items[@i].Cantidad" class="form-control cantidad-input" type="number" min="1" value="1" />
                                </td>
                                <td>
                                    <input asp-for="Items[@i].PrecioUnitario" class="form-control precio-unitario-input" type="number" step="0.01" readonly />
                                </td>
                                <td>
                                    <input class="form-control subtotal-input" type="number" readonly tabindex="-1" />
                                </td>
                                <td>
                                    <input asp-for="Items[@i].DescuentoAplicado" class="form-control descuento-input" type="number" step="0.01" value="0" />
                                </td>
                                <td>
                                    <input class="form-control total-input" type="number" readonly tabindex="-1" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm eliminar-item">X</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" id="addItem" class="btn btn-success mb-3">Agregar otro producto</button>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary w-100 btn-lg">Registrar Factura <i class="bi bi-plus-circle-fill"></i></button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Diccionario ProductoId : PrecioVenta
        var preciosProducto = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productosJs));

        // Función para actualizar precio unitario y cálculos
        function actualizarFila($fila) {
            var productoId = $fila.find('.producto-select').val();
            var precio = preciosProducto[productoId] || 0;
            $fila.find('.precio-unitario-input').val(precio);

            var cantidad = parseFloat($fila.find('.cantidad-input').val()) || 0;
            var descuento = parseFloat($fila.find('.descuento-input').val()) || 0;
            var subtotal = precio * cantidad;
            var total = subtotal - (subtotal * (descuento/100));

            $fila.find('.subtotal-input').val(subtotal.toFixed(2));
            $fila.find('.total-input').val(total.toFixed(2));
        }

        // Al cambiar producto, cantidad o descuento, actualiza cálculos
        function bindEventos($fila) {
            $fila.find('.producto-select').on('change', function() {
                actualizarFila($fila);
            });
            $fila.find('.cantidad-input, .descuento-input').on('input', function() {
                actualizarFila($fila);
            });
            $fila.find('.eliminar-item').on('click', function() {
                if ($('#tabla-items tbody tr').length > 1) {
                    $fila.remove();
                }
            });
        }

        $(document).ready(function() {
            // Evento para las filas iniciales
            $('#tabla-items tbody tr').each(function() {
                bindEventos($(this));
                actualizarFila($(this));
            });

            // Botón para agregar otra fila
            $('#addItem').click(function() {
                var $lastRow = $('#tabla-items tbody tr:last');
                var $newRow = $lastRow.clone();

                // Actualiza los índices de los campos
                var idx = $('#tabla-items tbody tr').length;
                $newRow.find('select, input').each(function() {
                    var name = $(this).attr('name');
                    if (name) {
                        var newName = name.replace(/\d+/, idx);
                        $(this).attr('name', newName).attr('id', newName);
                        // Limpia valores de inputs de la nueva fila
                        if (!$(this).hasClass('producto-select')) $(this).val('');
                        if ($(this).hasClass('cantidad-input')) $(this).val('1');
                        if ($(this).hasClass('descuento-input')) $(this).val('0');
                    }
                });

                $newRow.insertAfter($lastRow);
                bindEventos($newRow);
                actualizarFila($newRow);
            });
        });
    </script>
}
